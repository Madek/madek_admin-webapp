sql_snippets:
  -
    title: Find Invalid Entries
    query: |
      -- get all entries that are published but don't have all mandatory fields

      SELECT
        'https://medienarchiv.zhdk.ch/id/'  ||  id AS entry_url,
        responsible_user_id, created_at meta_data_updated_at
      FROM media_entries
      WHERE is_published = TRUE
      AND NOT EXISTS (
        SELECT 1
        FROM meta_data
        WHERE meta_data.media_entry_id = media_entries.id
        AND meta_data.meta_key_id IN (
          SELECT meta_key_id
          FROM context_keys
          WHERE context_id IN (
            SELECT unnest(contexts_for_entry_validation) FROM app_settings ORDER BY app_settings.id ASC LIMIT 1)
          AND is_required = true
        )
      )

      ORDER BY responsible_user_id
  -
    title: Find MediaFiles without MediaEntry
    query: |
      -- get all media files that do not have corresponding media entry

      SELECT
        filename, media_type
      FROM media_files
      LEFT JOIN media_entries
      ON media_files.media_entry_id = media_entries.id
      WHERE NOT EXISTS (
        SELECT 1
        FROM media_entries
        WHERE media_entries.id = media_files.media_entry_id
      )

      ORDER BY filename
  -
    title: Find videos with incomplete previews
    query: |
      -- get all video media files that have incomplete previews

      SELECT
        id, filename, media_type
      FROM media_files
      WHERE media_files.media_type = 'video'
      AND (:preview_types:)

  -
    title: Find people with same first and last name
    query: |
      -- get all people with same first and last name

      SELECT p1.*
      FROM people p1
      WHERE EXISTS
          ( SELECT 1
           FROM people p2
           WHERE lower(btrim(p1.first_name)) = lower(btrim(p2.first_name))
             AND lower(btrim(p1.last_name)) = lower(btrim(p2.last_name))
             AND p1.id <> p2.id )
      ORDER BY btrim(first_name) ASC, btrim(last_name) ASC;

  -
    title: Find people with same display name
    query: |
      -- get all people with same display name

      WITH people_with_display_name AS (
        SELECT *, person_display_name(coalesce(first_name, ''), coalesce(last_name, ''), coalesce(pseudonym, '')) AS display_name
        FROM people
      )
      SELECT *
      FROM people_with_display_name AS p1, people_with_display_name AS p2
      WHERE p1.display_name = p2.display_name
        AND p1.id <> p2.id
      ORDER BY p1.display_name ASC;

  -
    title: Find people with small differences in names (might be the same ones)
    query: |
      -- see the comments in the query to see where and how you can tweak the speed and the result size

      WITH people_tmp AS
        (SELECT *,
                btrim(coalesce(first_name, '')) || btrim(coalesce(last_name, '')) AS name
         FROM people
         WHERE first_name IS NOT NULL
           AND last_name IS NOT NULL)

      SELECT DISTINCT(p1.*), lower(p1.name)
      FROM
        (SELECT *
         FROM people_tmp
         ORDER BY name ASC
         OFFSET 0    -- this is page 1; increase by ((N * LIMIT) + 1) to go to the N + 1 page
         LIMIT 500   -- increase or decrease to adjust the result size and speed of execution
        ) p1,
        (SELECT *
         FROM people_tmp) p2
      WHERE p1.id <> p2.id
        AND p1.name <> p2.name
        -- levenshtein(text source, text target, int ins_cost, int del_cost, int sub_cost)
        AND levenshtein(p1.name, p2.name, 1, 1, 1) = 1     -- adjust the number of differences in names
      ORDER BY lower(p1.name);

  -
    title: Find keywords with small differences in terms (might be the same ones)
    query: |
      -- For each keyword find a list similar keywords using the levenshtein distance function.
      -- Levenshtein distance between two words is the minimum number of single-character edits
      -- (insertions, deletions or substitutions) required to change one word into the other. 

      -- Example: finding out keywords with exact difference of 1 letter and only substitution.
      --  SELECT 1 AS min_difference,
      --         1 AS max_difference,
      --         2 AS insertion_cost,
      --         2 AS deletion_cost,
      --         1 AS substitution_cost,

      -- Find keywords which are either exactly the same or have distance of 1
      -- insertion or deletion or substitution.
      WITH vars AS (
        SELECT 0 AS min_difference,
               1 AS max_difference,
               1 AS insertion_cost,       -- must be at least 1
               1 AS deletion_cost,        -- must be at least 1
               1 AS substitution_cost,    -- must be at least 1
               'madek_core:keywords'::text AS meta_key_id,
               50 AS keywords_limit
        )
        SELECT k1.id as id,
               k1.meta_key_id,
               k1.term as term,
               array_agg(k2.term) as similar_terms,
               '/admin/keywords?search_term=' || k1.id AS term_link,
               json_agg(k2.*) as similar_terms_data
      FROM (
        SELECT *
        FROM keywords
        WHERE meta_key_id = ( SELECT meta_key_id FROM vars )
        --  AND term ~* 'Abschluss.*'
        ORDER BY term ASC
        LIMIT ( SELECT keywords_limit FROM vars )
        ) AS k1
        INNER JOIN (
          SELECT id, term, meta_key_id
          FROM keywords
          WHERE meta_key_id = ( SELECT meta_key_id FROM vars )
        ) AS k2
        ON ( SELECT min_difference FROM vars ) <= levenshtein(
          k1.term,
          k2.term,
          ( SELECT insertion_cost FROM vars ),
          ( SELECT deletion_cost FROM vars ),
          ( SELECT substitution_cost FROM vars )
          )
        AND levenshtein(
          k1.term,
          k2.term,
          ( SELECT insertion_cost FROM vars ),
          ( SELECT deletion_cost FROM vars ),
          ( SELECT substitution_cost FROM vars )
          ) <= ( SELECT max_difference FROM vars )
        AND k1.id <> k2.id
        GROUP BY k1.id, k1.term, k1.meta_key_id
        ORDER BY k1.term ASC;
