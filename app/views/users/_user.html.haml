:ruby
  api_client_assign_path = if @api_client_params.is_a?(ActionController::Parameters)
    @api_client_params.merge!(user_id: user.id)
    if @api_client_params.key?(:id)
      edit_api_client_path(@api_client_params[:id], edited_api_client: @api_client_params)
    else
      new_api_client_path(new_api_client: @api_client_params)
    end
  end

%tr{'data-id' => user.id, class: ('success' if user.admin?)}
  %td
    - if user.deactivated?
      %span.label.label-default deactivated
    = user.login
  %td= user.email
  %td
    = user.to_s
  %td
    = link_to person_path(user.person) do
      = user.person
  %td
    :ruby
      created_entries_count = user.created_media_entries.rewhere(is_published: [true, false]).count
      responsible_entries_count = user.responsible_media_entries.rewhere(is_published: [true, false]).count

      created_sets_count = user.created_collections.count
      responsible_sets_count = user.responsible_collections.count

    %i
      Entries: 
      %a{href: media_entries_path(filter: { responsible_entity_id: user.id })}= responsible_entries_count
      (
      %a{href: media_entries_path(filter: { creator_id: user.id })}= created_entries_count
      )
    <br>
    %i
      Sets:
      %a{href: collections_path(filter: { responsible_entity_id: user.id })}= responsible_sets_count
      (
      %a{href: collections_path(filter: { creator_id: user.id })}= created_sets_count
      )
    <br>
  %td{ class: (user.admin? ? 'success' : 'danger') }
    = user.admin? ? 'Yes' : 'No'
  %td.active.text-center
    .btn-group.btn-group-sm.btn-group-vertical
      - if @group.present?
        = link_to add_user_group_path(@group, user_id: user.id), method: :patch, class: 'btn btn-success' do
          %span.glyphicon.glyphicon-plus
          Add to the Group
      - elsif @delegation || @return_to.presence # for new view
        - if @delegation_user_ids.include?(user.id) || @delegation_supervisor_ids.include?(user.id)
          .text-muted Already added
        - else
          :ruby 
            method = ( @return_to.presence ? :get : :patch )
            link = if @as_supervisor && @delegation
                     add_supervisor_delegation_path(@delegation, user_id: user.id)
                   elsif @as_supervisor && @uri_spec
                     query_params = @uri_spec[:query_params].deep_dup
                     query_params[:delegation][:supervisor_ids] = ( @delegation_supervisor_ids + [user.id] )
                     "#{@uri_spec[:path]}?#{query_params.to_query}"
                   else
                     add_user_delegation_path(@delegation, user_id: user.id) 
                   end
          = link_to link, method: method, class: 'btn btn-success' do
            %span.glyphicon.glyphicon-plus
            Add to the Delegation
      - elsif @api_client_params.present?
        = link_to api_client_assign_path, class: 'btn btn-success' do
          %span.glyphicon.glyphicon-plus
          Assign to the API Client
      - elsif session[:vocabulary_id].present?
        = link_to path_to_vocabulary_permission_form(user), class: 'btn btn-success' do
          Grant Vocabulary Permission
        = link_to users_path(reset_vocabulary_params: true),
                  class: 'btn btn-default' do
          Cancel
      - else
        = link_to user_path(user), class: 'btn btn-default', title: 'Details' do
          %i.glyphicon.glyphicon-eye-open
          Details
        = render partial: 'action_buttons', locals: { user: user, editable: true, deletable: true }
