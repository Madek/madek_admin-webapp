:ruby
  if not @meta_key.core? and @meta_key.can_have_keywords? and @meta_key.multiple_selection
    multi_keyword_media_entries_count = @meta_key.media_entries_where_keywords_used_more_than_once.count
    multi_keyword_collections_count = @meta_key.collections_where_keywords_used_more_than_once.count
    must_have_multiple_selection = multi_keyword_media_entries_count > 0 || multi_keyword_collections_count > 0
  end

- is_used = @meta_key.meta_data.any?

= form_for @meta_key, html: { class: 'form-horizontal', role: 'form' } do |f|

  .form-group
    .col-xs-3
      = f.label :id, class: 'control-label'
    .col-xs-6
      - if f.object.persisted?
        = content_tag('p', nil, class: 'form-control-static') { content_tag('samp') { concat f.object.id } }
      - else
        = f.text_field :id, class: 'form-control'

  .form-group
    .col-xs-3
      = f.label :vocabulary_id, class: 'control-label'
    .col-xs-6
      - if f.object.persisted?
        = content_tag('p', nil, class: 'form-control-static') { content_tag('samp') { concat f.object.vocabulary_id } }
      - else
        = f.select :vocabulary_id,
            options_from_collection_for_select(Vocabulary.sorted, :id, :id, f.object.vocabulary_id),
            {}, class: 'form-control'

  - unless @meta_key.core?
    .form-group
      .col-xs-3
        = f.label :meta_datum_object_type, class: 'control-label'
      .col-xs-6
        = f.select :meta_datum_object_type,
            options_for_select(['', MetaKey.object_types].flatten, f.object.meta_datum_object_type),
            {},
            class: 'form-control',
            disabled: is_used,
            title: "This Metakey is #{is_used ? '' : 'NOT '}used!"

  - if not @meta_key.core? and @meta_key.can_have_keywords?
    .form-group
      .col-xs-3
        = second_step_label(:keywords_alphabetical_order, f)
      .col-xs-6
        %label.radio-inline
          = f.radio_button :keywords_alphabetical_order, true
          Yes
        %label.radio-inline
          = f.radio_button :keywords_alphabetical_order, false
          No

  - if not @meta_key.core? and @meta_key.can_have_people_subtypes?
    .form-group
      .col-xs-3
        = second_step_label(:allowed_people_subtypes, f)
      .col-xs-6
        .checkbox.checkbox-collection
          = f.collection_check_boxes :allowed_people_subtypes, Person.subtypes, :subtype, :subtype, {include_hidden: !is_used}, {} do |c|
            = c.label { c.check_box(disabled: is_used) + c.text }

  - if not @meta_key.core? and @meta_key.can_have_allowed_rdf_class?
    .form-group
      .col-xs-3
        = second_step_label(:allowed_type, f)
      .col-xs-6
        = f.collection_radio_buttons :allowed_rdf_class, RdfClass.all, :id, :id, include_hidden: false do |c|
          = c.label(class: 'radio-inline') { c.radio_button(disabled: is_used) + c.text }

  = f.fields_for :labels, OpenStruct.new(f.object.labels) do |lf|
    - I18n.available_locales.each do |locale|
      .form-group
        .col-xs-3
          = lf.label locale, "Label [#{locale}]", class: 'control-label'
        .col-xs-6
          = lf.text_field locale, class: 'form-control'

  = f.fields_for :descriptions, OpenStruct.new(f.object.descriptions) do |lf|
    - I18n.available_locales.each do |locale|
      .form-group
        .col-xs-3
          = lf.label locale, "Description [#{locale}]", class: 'control-label'
        .col-xs-6
          = lf.text_area locale, class: 'form-control', rows: 4

  = f.fields_for :hints, OpenStruct.new(f.object.hints) do |lf|
    - I18n.available_locales.each do |locale|
      .form-group
        .col-xs-3
          = lf.label locale, "Hint [#{locale}]", class: 'control-label'
        .col-xs-6
          = lf.text_area locale, class: 'form-control', rows: 4

  = f.fields_for :documentation_urls, OpenStruct.new(f.object.documentation_urls) do |lf|
    - I18n.available_locales.each do |locale|
      .form-group
        .col-xs-3
          = lf.label locale, "Documentation URL [#{locale}]", class: 'control-label'
        .col-xs-6
          = lf.text_field locale, class: 'form-control'

  - if not @meta_key.core? and f.object.can_have_text_type?
    .form-group
      .col-xs-3
        = f.label :text_type, class: 'control-label'
      .col-xs-3
        = f.select :text_type, MetaKey.text_types.keys, {}, class: 'form-control'

  - if not @meta_key.core? and ( f.object.can_have_keywords? or f.object.can_have_roles? )
    .form-group
      .col-xs-offset-3.col-sm-4
        .checkbox
          = second_step_label(:is_extensible_list, f) do
            = f.check_box :is_extensible_list
            Extensible?

  - unless @meta_key.core? 
    - %w(media_entries collections).each do |resource_type|
      .form-group
        .col-xs-offset-3.col-sm-4
          .checkbox
            %label
              = f.check_box "is_enabled_for_#{resource_type}"
              Enabled for #{resource_type.humanize(capitalize: false)}?

  - if not @meta_key.core? and @meta_key.can_have_keywords?
    .form-group
      .col-xs-3
        = second_step_label(:multiple_selection, f)
      .col-xs-6
        %label.radio-inline
          = f.radio_button :multiple_selection, true, disabled: must_have_multiple_selection
          Multiple selection
        %label.radio-inline
          = f.radio_button :multiple_selection, false, disabled: must_have_multiple_selection
          Single selection
        - if must_have_multiple_selection
          .help-block
            Can't be changed to single selection because media resources with multiple keywords are present 
            (media entries: #{multi_keyword_media_entries_count}, collections: #{multi_keyword_collections_count})
            = f.hidden_field :multiple_selection

  - if not @meta_key.core? and @meta_key.can_have_keywords?
    .form-group
      .col-xs-3
        = second_step_label(:selection_field_type, f)
      .col-xs-6
        = f.collection_radio_buttons :selection_field_type, ['auto', 'list', 'mark'], :to_s, :capitalize do |c|
          = c.label(class: 'radio-inline') { c.radio_button + c.text }
        %div.help-block 
          %div Auto: "List" when more than 16 entries, "Mark" otherwise
          %div List: Dropdown with inline search
          %div Mark: Checkboxes for multiple selection, radio buttons for single selection


  .form-group
    .col-xs-offset-3.col-xs-3
      = button_tag type: :submit, class: 'btn btn-success' do
        %span.glyphicon.glyphicon-ok
        Save
      = link_to 'Go back', meta_keys_path, class: 'btn btn-link'
